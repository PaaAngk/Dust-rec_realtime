version: "3.3"
services:

  # client:
  #   image: ghcr.io/insight-platform/savant-deepstream:latest
  #   volumes:
  #     - zmq_sockets:/tmp/zmq-sockets
  #     - ./assets/test_data:/test_data
  #     - ./src/client:/opt/savant/src/client
  #     - ./src/output:/opt/savant/src/output
  #   entrypoint: python /opt/savant/src/client/run.py
  #   environment:
  #     - MODULE_HOSTNAME=module
  #   links:
  #     - jaeger
  #   networks:
  #     - network

  video-loop-source:
    image: ghcr.io/insight-platform/savant-adapters-gstreamer:latest
    restart: unless-stopped
    volumes:
      - zmq_sockets:/tmp/zmq-sockets
      - /tmp/video-loop-source-downloads:/tmp/video-loop-source-downloads
    environment:
      - LOCATION=https://eu-central-1.linodeobjects.com/savant-data/demo/Free_City_Street_Footage.mp4
      - DOWNLOAD_PATH=/tmp/video-loop-source-downloads
      - ZMQ_ENDPOINT=pub+connect:ipc:///tmp/zmq-sockets/input-video.ipc
      - SOURCE_ID=city-traffic
      - SYNC_OUTPUT=True
    entrypoint: /opt/savant/adapters/gst/sources/video_loop.sh

  # uri-input:
  #   image: ghcr.io/insight-platform/savant-deepstream:latest
  #   volumes:
  #     - zmq_sockets:/tmp/zmq-sockets
  #     - ./assets/test_data:/test_data
  #   working_dir: /opt/savant
  #   entrypoint: python
  #   command:
  #     - scripts/uri-input.py
  #     - /test_data/city.mp4
  #     - --socket
  #     - pub+connect:ipc:///tmp/zmq-sockets/input-video.ipc
  #     - --sync
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   networks:
  #     - network

  # module:
  #   build:
  #     context: .
  #     dockerfile: docker/Dockerfile.x86
  #   volumes:
  #     - zmq_sockets:/tmp/zmq-sockets
  #     - ./models_cache:/models
  #     - ./downloads_cache:/downloads
  #     - ./src/module:/opt/savant/src/module
  #   environment:
  #     - HEALTHCHECK_PORT=8888
  #     - ZMQ_SRC_ENDPOINT=sub+bind:ipc:///tmp/zmq-sockets/input-video.ipc
  #     - ZMQ_SINK_ENDPOINT=pub+bind:ipc:///tmp/zmq-sockets/output-video.ipc
  #     - METRICS_FRAME_PERIOD=1000
  #     - DETECTOR=yolov8m
  #   ports:
  #     - "8888:8888"
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   links:
  #     - jaeger
  #   networks:
  #     - network

  # jaeger:
  #   image: jaegertracing/all-in-one:1.49
  #   environment:
  #     - COLLECTOR_ZIPKIN_HOST_PORT=:9411
  #   ports:
  #     - "6831:6831/udp"
  #     - "6832:6832/udp"
  #     - "5778:5778"
  #     - "16686:16686"
  #     - "4317:4317"
  #     - "4318:4318"
  #     - "14250:14250"
  #     - "14268:14268"
  #     - "14269:14269"
  #     - "9411:9411"
  #   networks:
  #     - network

  always-on-sink:
    image: ghcr.io/insight-platform/savant-adapters-deepstream:latest # 0.2.9-6.3
    restart: unless-stopped
    ports:
      - "554:554"    # RTSP
      - "1935:1935"  # RTMP
      - "888:888"    # HLS
      - "8889:8889"  # WebRTC
    volumes:
      - zmq_sockets:/tmp/zmq-sockets
      - ./assets/stub_imgs:/stub_imgs
    environment:
      - ZMQ_ENDPOINT=sub+connect:ipc:///tmp/zmq-sockets/output-video.ipc
      - SOURCE_ID=city-traffic
      - STUB_FILE_LOCATION=/stub_imgs/smpte100_1280x720.jpeg
      - DEV_MODE=True
    command: python -m adapters.ds.sinks.always_on_rtsp
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # graphite:
  #   image: graphiteapp/graphite-statsd

  # grafana:
    # image: grafana/grafana-oss
    # volumes:
    #   - ./grafana_datasources:/etc/grafana/provisioning/datasources/
    #   - ./grafana_dashboards:/etc/grafana/provisioning/dashboards/
    # ports:
    #   - "3000:3000"
    # environment:
    #   - GF_AUTH_ANONYMOUS_ENABLED=true
    #   - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
    #   - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
  
  api:
    build:
      context: ./api
      # network: host
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
    ports:
      - 8500:8500
    volumes:
      - ./api:/app

  backend:
    build:
      context: ./backend
      # network: host
    restart: unless-stopped
    ports:
      - 8000:8000
    volumes:
      - ./backend:/app
      - zmq_sockets:/tmp/zmq-sockets
    # network_mode: host
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
  
  frontend:
    build:
      context: ./frontend
      # network: host
    command: sh -c "ng serve --host 0.0.0.0 --port 4200"
    ports:
      - 4200:4200
    volumes:
      - ./frontend:/app
    # network_mode: host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  redis:
    image: redis/redis-stack:latest
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis:/data
    environment:
      - REDIS_PASSWORD=admin
      - REDIS_PORT=6379
    # networks:
    #   - dust-rec_network
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
  
  # data_processor:
  #   build:
  #     context: ./04_data_processor
  #   restart: always
  #   depends_on:
  #     - kafka
  #   ports:
  #     - 8004:8004
  #   environment:
  #     - DATA_PROCESSOR_WEB_HOST=0.0.0.0
  #     - DATA_PROCESSOR_WEB_PORT=8004
  #     - DATA_PROCESSOR_KAFKA_BROKER=kafka:9092

  # kafka:
  #   image: bitnami/kafka:3.5.1
  #   restart: unless-stopped
  #   volumes:
  #     - "kafka_data:/bitnami"
  #   environment:
  #     # KRaft settings
  #     - KAFKA_CFG_NODE_ID=0
  #     - KAFKA_CFG_PROCESS_ROLES=controller,broker
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
  #     # Listeners
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
  #   healthcheck:
  #     test:
  #       - CMD-SHELL
  #       - /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list
  #     start_period: 60s
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   restart: always
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     - DYNAMIC_CONFIG_ENABLED=true
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  
  # kafka-redis-sink:
  #   image: ghcr.io/insight-platform/savant-adapters-py:0.2.9
  #   restart: unless-stopped
  #   volumes:
  #     - zmq_sockets:/tmp/zmq-sockets
  #   environment:
  #     - ZMQ_ENDPOINT=sub+connect:ipc:///tmp/zmq-sockets/output-video.ipc
  #     - KAFKA_BROKERS=kafka:9092
  #     - KAFKA_TOPIC=kafka-redis-adapter-demo
  #     - KAFKA_CREATE_TOPIC=True
  #     - KAFKA_CREATE_TOPIC_NUM_PARTITIONS=4
  #     - KAFKA_CREATE_TOPIC_REPLICATION_FACTOR=1
  #     - 'KAFKA_CREATE_TOPIC_CONFIG={"retention.ms": 300000}'
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_DB=0
  #     - REDIS_TTL_SECONDS=60
  #   command: python -m adapters.python.sinks.kafka_redis
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started

volumes:
  zmq_sockets:
  # kafka_data:
  redis:

# networks:
#   network:
#     attachable: true